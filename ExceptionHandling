
Exception Handling

  1. Introduction
  2. Runtime Stack mechanism
  3. Default Excepiton Handling
  4. Exception Hierarchy
  5. Customized Exception handling by try catch
  6. Control flow Exception Handling by try-catch
  7. Methods to print Exception Information
  8. Try with multiple catch blocks
  9. Finally
  10. Difference between final, finally and finalize
  11. Various possible combinations of try catch finally 
  12. Control flow in try catch finally
  13. Control flow in Nested Try catch finally 
  14. Throw
  15. Throws
  16. Exception Handling keywords Summary
  17. Various possible compile time error in exception handling
  18. Customized exception
  10. Top 10 Exceptions.


Exception: When unwanted, unexpected event that disterbs normal flow of program is called Exception
     ex: Sleeping Exception, FileNotFoundException
    
It is highly recommended to handle exceptoins, the main objective of exception handling is "Graceful termination of the program"

Exception handling dosenot mean repairing an exception, when we have to define alternative way to continue rest of the program
normally this is nothing but Exception Handling

Ex: If our program requiremet is to read data form remote location and at runtime if that file is not available our program should
    not be terminated abnormally. We have to provide an alternative by providing a local file to continue the program execution with
    out any interruption this process is called Exception handling.
    
          try {
            //some code
          } catch(FileNotFoundException e) {
            use local file location if you have an exception.
          }
          

Runtime stack Mechanism:

E-> For every Thread jvm will crate a Runtimestack
-> All method calls performed by the thread will be stored in this stack
-> Each entry in the thread is called Activiation record or stack frame
-> After completing the method call JVM delets the corresponding entry from the stack.
-> After completing all methodcalls, just before the terminating the thread jvm destoryes the stack.

Ex: 

    class Test {
     public static void main(String []args) {
      doStuff();
     }
     public static void doStuff() {
      doMoreStuff();
     }
     
     public static void doMoreStuff() {
     
     }
    }
    
    * Stack will be created by JVM
    * activation record main will be added to stack
    * activation records doStuff will be added
    * activation record doMoreStuff will be added
    * doMoreStuff recored will be deleted
    * doStuff record will be deleted
    * Main will be deleted 
    * finally stack will be destroyed.
    
    Default Exception handling: 
    -> If you have any exception, the method in which it is raised is responsible to create exception object by including 
       the following information 
             1. Name of the Exception
             2. Description of Exception
             3. Location of Exception(stack trace)
    -> After crating exception object method handovers that exception object to the JVM
    -> JVM checks whether the method contians any exception handling code or not.
    -> If it doest not contain any hadling code the jvm terminattes that method obnormally and removes corresponding entry 
       from the stack 
       JVM identifies tha caller method and checks whether callermethod contains any handling code if not it terminates that
       method obnormally from the stack 
       This process will continue until main() if the main also dosent contain any handling code the main will be terminated 
       obnormally and removes corresponding entry from stack
       Just before terminating the program abnormally jvm handovers the responsibility to exception handling to the deraul
       exception handler 
       Default exception hadler jsut print exception informaiton to the console in the following format 
           Name of the excepito: desc
           locaiton: stack trace
         
Exception Hierarchy:

-> Throwable class acts as a root for entire Java Exception Hierarchy. It has the following  2 child class 
      1. Exception
      2. Error
  
Exception: Most of the cases Exception are caused by our program and these are recoverable
Error: Most of the cases Errors are not caused by our program these are due to loack of system resources
   errors are non-recoverable

Checked vs Un-checked Exception:
The Exception which are check by compiler for smooth execution of the program at runtime are called checked Exception

        FileNotFoundException fe
        
The exception which are not checked by compiler are called Un-checked Exception 

        Arithematic Exception 
        Whether exception is checked or unchecked by compiler are called Unchecked Exceptions
        Runtime exception and its child classes
        Error and its child classes are unchecked exceptions and all remaining are checked exception s
        
Partially vs fully checked exceptions:

A checked exception is said to be fully checked iff all it's child classes are alos checked
A checked exceptino is said to be partially checked iff some it's child classes are unchecked.

Customized Exception Handling by try catch:

We can maintain Risky code with in try block and corresponding handling code inside catch block.


Various method to print exception information:
Throwable class defines the following method to print exception 
               
               printstacktrace
               this method prints exception informaiton in the following format 
               Name of Exception : discription by stack trace
               
               toString()
               it prints excepiton ifnromaton in the following format 
               Name of the exception : description and stack trace
               
               getMessage() this method prints only discription of the exception
               
               


try {
 //
 //
 //
 } catch(ArthmeticException e) {
  //
  //
 } catch(FileNotFoundException e) {
  //
 } catch(NullPointerException e) {
  //
 } catch(Exception e) {
  //
 }
 
 
 ->Hence try with multiple catch bocks is possible and highly recommended to use
 -> If try with multiple catch blocks are present then order of catch blocks is very important. And it should be from 
    child to parent then we will get CompiletimeError saying. Exception .... has alreadyuu declare been caught  
        child ot paren is fallows
        
  Finally Block :
   It is never recommended to define cleanup code with in the try block because there is no gurranty for the executoin of 
   every statemetn 
   
   It is never recommended to deifne cleanup code with in the catch block it wont be executed if there is no exception 
   
   We reqyuerd to place to maintin clean up code which should be executed always irrespective of exception raised or not 
   wheather hande or not hande such type eof place nothing but finally blkc 
   
   Hence the main purpose of finally blcok is to maintain cleanup cod ewhich shoudl be executed always.
   
   Rewturn vs Finally:
   
   Finally block can dominate return statement present inside try or catch block. First finally will be executed and then 
   return statement will be considered
   
   The only situation where the finally block will not be executed is when ever jvm shutdown when ever we are using 
   System.exit(0);
   
   
   Difference between final finally finalize 
   
    final: it is a modifier applicable for classes methods and instance and class members 
    finally: It is a block always associated iwth try catch to maintain cleanup code which should be executed always irrespective
            of whether exception occured or in any case finally will be executed.
    finalize: it is a method which shold be executed by garbage collector before destroying any object perform cleanup activities
    
    
    Contorl flow in try catch finall y
    
     try {
        statement 1;
        statement 2;
        statement 3;
      } catch(Exception e) {
          statement 4;
      }finally {
        statement 5;
      }
      
      
Control Flow in Nested try catch finally:

try  { 
        statement 1; 
        statement 2; 
        statement 3;
          try{
            statement 4;
            statement 5;
            statement 6;
          } catch(exceptino e) {
            statement 7;
          } finally { 
            statement 8;
          }
          statement 9;
        } catch (Exception e) { 
            statement 10; 
        } finally {
            state11;
        }
        statement 12;
    
case 1: If there is no exception, then 1 2 3 4 5 6 8 9 11 12 normal termination 

case 2: If an exception raised at statement2  and corresponding catch block will be executed and finally of it and  1  10 11 12

case 3: If an exception raised at statement 2 and corresponding catch block not matched then   an    1 and 11 abnormal termination

case 4: If an exception raised at statement 5 correspoinding inner catch has matched 1 2 3 4  7 8 9 11 12 normal termination 

case 5: If an exception raised at statement 5 and corresponding inner has not matched but out catch has matched then 
        1 2 3 4 8 10 11 12 
        
case 6 If an exception raised at statemtn 5 and corresponding catch block are not matched then 1 2 3 48 11 

case 7 if an exception raised at state 7 and the corresponding catch block matched the 1 2 3... 8  10 11 12 

case 8 If an exception raised at statemetn 7 and the corresponding matc not matched then 1 2 3 ... . 8 11 abnormal 

case 9: If an exception raised at state 8 and corresponding catch matched then 1 2 3 .... 10 11 12 

case 10: If an exception raised at state 8 and correspondin catch has not matched then 1 , 2 3 ..... 11 abnormal 

case 11 if an exception raised at state 9 corresponding catch method then 1 2, 3.... 10 11 12 

case 12: if an exception raised then stae 9 corresponding cathc  1 2 3..... 8 11

case 13: if an exception raised at state 10 it is always abnormal termination 

case 14 if an exception raised at state 11 or 12 it is always abornal termination


Throw: Some times we can crate exception object manualy and hand over that object to th ejvm exlicity by using throw key word

      throw new ArithematicException("/by zero")
 
In genral we can use throw keyword for customized exceptions 

 case 1: If we are trying to throw new refernce, we will get null pointerexception
 
 after throw statement we are not allowe dot writer any statement directly otherwise we will get compiletime error saying unreachable
 
 We can ise throw keyword only for throwable type otherwise we will get compiletime error saying incompatiable types
 
 
 Throws: 
 
 

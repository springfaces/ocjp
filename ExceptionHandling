
Exception Handling

  1. Introduction
  2. Runtime Stack mechanism
  3. Default Excepiton Handling
  4. Exception Hierarchy
  5. Customized Exception handling by try catch
  6. Control flow Exception Handling by try-catch
  7. Methods to print Exception Information
  8. Try with multiple catch blocks
  9. Finally
  10. Difference between final, finally and finalize
  11. Various possible combinations of try catch finally 
  12. Control flow in try catch finally
  13. Control flow in Nested Try catch finally 
  14. Throw
  15. Throws
  16. Exception Handling keywords Summary
  17. Various possible compile time error in exception handling
  18. Customized exception
  10. Top 10 Exceptions.


Exception: When unwanted, unexpected event that disterbs normal flow of program is called Exception
     ex: Sleeping Exception, FileNotFoundException
    
It is highly recommended to handle exceptoins, the main objective of exception handling is "Graceful termination of the program"

Exception handling dosenot mean repairing an exception, when we have to define alternative way to continue rest of the program
normally this is nothing but Exception Handling

Ex: If our program requiremet is to read data form remote location and at runtime if that file is not available our program should
    not be terminated abnormally. We have to provide an alternative by providing a local file to continue the program execution with
    out any interruption this process is called Exception handling.
    
          try {
            //some code
          } catch(FileNotFoundException e) {
            use local file location if you have an exception.
          }
          

Runtime stack Mechanism:

-> For every Thread jvm will crate a Runtimestack
-> All method calls performed by the thread will be stored in this stack
-> Each entry in the thread is called Activiation record or stack frame
-> After completing the method call JVM delets the corresponding entry from the stack.
-> After completing all methodcalls, just before the terminating the thread jvm destoryes the stack.

Ex: 

    class Test {
     public static void main(String []args) {
      doStuff();
     }
     public static void doStuff() {
      doMoreStuff();
     }
     
     public static void doMoreStuff() {
     
     }
    }
    
    * Stack will be created by JVM
    * activation record main will be added to stack
    * activation records doStuff will be added
    * activation record doMoreStuff will be added
    * doMoreStuff recored will be deleted
    * doStuff record will be deleted
    * Main will be deleted 
    * finally stack will be destroyed.
    
    Default Exception handling: 
    -> If you have any exception, the method in which it is raised is responsible to create exception object by including 
       the following information 
             1. Name of the Exception
             2. Description of Exception
             3. Location of Exception(stack trace)
    -> After crating exception object method handovers that exception object to the JVM
    -> JVM checks whether the method contians any exception handling code or not.
    -> If it doest not contain any hadling code the jvm terminattes that method obnormally and removes corresponding entry 
       from the stack 
       JVM identifies tha caller method and checks whether callermethod contains any handling code if not it terminates that
       method obnormally from the stack 
       This process will continue until main() if the main also dosent contain any handling code the main will be terminated 
       obnormally and removes corresponding entry from stack
       Just before terminating the program abnormally jvm handovers the responsibility to exception handling to the deraul
       exception handler 
       Default exception hadler jsut print exception informaiton to the console in the following format 
           Name of the excepito: desc
           locaiton: stack trace
         
Exception Hierarchy:

-> Throwable class acts as a root for entire Java Exception Hierarchy. It has the following  2 child class 
      1. Exception
      2. Error
  

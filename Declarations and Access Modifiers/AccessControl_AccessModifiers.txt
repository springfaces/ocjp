			
				
					Declarations and Access Modifiers




	1. Java Source File Structure 
	2. Class Modifiers
	3. Member Modifiers
	4. Interfaces




Java Source file Structure:

	A java program can contain any no of classes but atmost one class can be declared as public. 
	If ther is apublic classs the name of the progrma and name of public class must match otherwise 
	we will get a compile time errro.

	If there is no public class then we can use any name as Java source file name, there is no restriciton.

		ex:  class A {} class B{} class C {}

			Raghu.java or MyClass.java ect...


	case 1: If there is no public class then we can use any name as java source file 
		ex: A.java or B.java Or c.java or Ant.java....

	case 2: If the class B is declared as public then if you save the source file with A.java in this case 
		we will get compiletime error. 
			ce: "Class B is public should be declard in a file name B.java" very very important 


	case 3: If we declare Both A and B classes as public and name of the  program as B.java then we will 
		get compile time error saying Class A is public shoulb b e declared in a file named A.java
	

	Note: It is highly recommended to take one class per java source file and name of the file and that class 
		name must be matched this approach improves code readability.
	  


		below is the very very interesting example

			class A { public static void main(String [] args) { System.out.println("A");} }
			class B { public static void main(String [] args) { System.out.println("B");}} }
			class C { public static void main(Stirng [] args) {  System.out.println("C");}} }
			class D { }

		for the above code is save to Raghu.java source file 
		1. Execute of the Raghu.java file is successful  no compile time errors
		2. A.class, B.class, C.class D.class will be generated
		3. java A o/p : A
		4. java B o/p : B
		5. java C o/p : C
		6. java D o/p : Runtime Exception: NoSuchMethodError: main
		7. java Raghu o/p Runtime Exception: NoClassDefFoundError: Raghu




Import Statements:

	The main use of import it that you can pin point the class file location
	We can resolve this problem by using fully qualified name 
	
		ex: package
		package java.util.ArrayList;
		package java.util.List;

	The problem with the usage of import statement will increase the size of the code
	we can resolve the multiple import statements of same package by usig import statement
	
		form the example package we can replace by below example

			ex: import java.util.*;

			java.util.ArrayList -> is fully qualified name, the problem is that we need to specify 
			everytime if needed which leads increase of code length

			
case 1: 
	Types of import statements 

		There are 2 types of import statements 
			1. Explicit class import
			2. Implicit class import 

		Explicit ex: import java.util.ArrayList or import java.util.List 
			      a. This type of import is highly recommended to use, because it improves readability 
				  of the code
			      b. 	
				
		Implicit ex: import java.util.*; ( with .* we get all the sub classes below util)
			     a. It is never recommended to use this type of import because it reduces readability of the code.
			     b.

case 2: 
	In c language #include all the specified header files will be loaded at the tiem of include dstatemtn 
	only irrespecitve of wheather we are using those headerfiles or not. Hence this is static bading

	But in this case of java language import statemtn no called file will be loaded at the time of import
	statement, in the next lines of code when ever we are using aat that time only the corresponding .class
	file will be loaded this type of laoding is called dynamic loading or load on demand or load on fly or lazy loading.


case 3: 
	which of the following import statements are valid?

	import java.util; (compile time error)

	import java.util.ArrayList; ( fully qualified name no issues)

	import java.util.ArrayList.*; ( it reached the fully qualified name and no need to add .* which is wrong)

	import java.util.*;( pefect way of importing all the classes falling inside util package)

case 4:
	Consider the code
	class MyRemoteObject extends java.rmi.UnicasteRemoteObject {

	}

	the above code compile fine eventhough we are not using import statement becase we used fullyqualified name

	note: When ever we are using fully qualified name import statement are not required,
	If we use import statement then fully qualified class name is not required

case 5:
	ex: import java.util.*;

	we can use Date class inside our class like 

	Date date  = new Date() 
	we excluded fully qualified name of date class which will  be 

	java.util.Date date = new java.util.Date();

	But in some cases there will be ambiguity if we include java.slq.*;
	since java.sql.Date will cause the program into ambiguity situation.


	import java.util.Date;
	import java.sql.Date;

	Compiletime error: a type with the same simple name is already defined by the 
	single-type-import of Date
	imprort java.sql.Date;



case 6:
	Order of priority 
		1. Explicit class import 
		2. classes present in curent working directory 
		3. implicit class import 


	import java.util.Date;
	import java.sql.*;

	Class Test {
		---> priority goes to Explict class
	}

	conclusion: While Resolving class names compiler wil always gives the precidence in the following order.
		 
	
case 7:

	When ever we are importing a package all classes and interfaces present in the package are availabe
	but not subpackage classes

		ex java ->
			  |-util-> 
				 |-regex ->
					  |-pattern
					


	-> To use patttern class which of the following import is required
		
		import java.*;
		import java.util.*;
		import java.util.regex.*; -> ture
		import java.util.regex.pattern; -> true

	if we want to use sub-package class its mandatory to include import statement until sub-package level.


case 8:
	The following 2 packages are not requried to import becase all classes and interaces present int
	these 2 packages are available by default to every java program

	java.lang ----> package
	default package( current working directory) not

case 9:
	importing is totally compile time related concept if more no of imports then time required for compilation
	is more but there is no effect of execution time(runtime)
	
	* try to understand the above statement based on compiler prespective
	


Static Imports:

	1. It was introducedin version 1.5 

	2. According to sun static import improves readability of the code, But according to world wide 
	programming static imports reduces the readability of the code crates confusion! It is not recommended to 
	use static import if there is no specific requirement.

	3. Usually we can access static members by using class names, but when ever we are using static import, 
	it is not requried to use class name and we can access static member directly.


		with out static : 
				class Test {
					public static void main(String []args) { 
						System.out.println(Math.sqrt(4) + " \n" + Math.random()+ " \n" + Math.max(10, 20));	
					}
				}

		Using static import:

			import static java.lang.math.sqrt;
			import static java.lang.math.*;

			class Test {
				public static void main(String []args) { 
					System.out.println(sqrt(4) + "\n " + random() + " \n" + max(10, 20));
				}
			}


Explain about System.out.println():

	class Test {
	
		private static String name = "raghu";
				
		public static void main(String [] args) {
			System.out.println(Test.name.length);
		}
	}


	class System {
		static printStream out;
		
	}

	System.out.println();


	Out is a static variable present in the System class hence we can access by using classname.

	But when ever wera using static import it is not requried to use the classnmae we can acceess out variable or static 
	variable direclty.


		import satic java.lang.System.out;


		public class Test{
			public static void main(String []args) {
				out.println("Hello");
				out.println("Hi"):
			}
		}


The most interseting concept which alway every programmer should know about this usage
	ex:
	class Test {
		static String name = "xyz";
	}

	Test.name.length();

	Test : Name  of the class
	name : static variable
	length() : Method present in a String class

	ex:
	class System {
		static Printstream out;
	}

	System.out.println();

	System: Name of the class
	out: static variable
	println(): Method present in PrintStream class


	explanation:

	out is the static variable present in the System class we can access by using classname
	When ever we are using static import it is not required to use class name we can accesss out variable directly 

	Note: stop writing code on the notes try to execute the program and check the out put



Purspective Ambiguity 

	improt static java.lang.Integer.*;
	import static java.lang.Byte.*;


	class Test {
		public static void main(String []args) {
			System.out.println(MAX_VALUE);
		}
	}

	Note two classes containing same name is very common hence ambiguity problem is alaso very common in static import

	While resolving the static member the compiler will always gives the precedence in the following order
		
		current class static member 
		explicit static import
		implicit static import


	Below example is very very important to understand the precedence
			
		import static java.lang.Integer.MAX_VALUE; --------------------->2

		import static java.lang.Byte.*; --------------------------------> 3

		class Test {
			
			static int MAX_VALUE = 10; -----------------------------> 1

			public static void main(String [] args) {
				System.out.println(MAX_VALUE); 
			}
		}

		1 -> current class staic member 
		2 -> explict static import
		3 -> Implict static import


	In the above case if we comment  1 then the priority goes to explicit static import 2 and out put 
	will be different if we comment line 1 and 2 then the priority goest to 3

	note -> always think like compiler

	drawback : Strictly speaking usage of class name to access staitc variables and method will not 
	imporve readability of the code hence it is not recommended to use the static import

	which of the following import statemtns are valid

			
				import java.lang.math.*; -------------> false, we should not use *  after the class
				import java.lang.math.Sqrt.* -------------> false, we should not use * after the class
				
				import java.lang.math; true
				import static java.lang.math.*; true

				import static java.lang.math.sqrt(); false 
				
				import static java.lang.math.sqrt; ture

Normal import vs Static import 
	We can use normal import to import classes and intefaces of a package when ever we are using genrela 
	import it is not requried to use fully qualified name and we can use short names directly

	We can use static import to import static variables and methods of a class when ever we are using static
	import then it is not requiredto include class name to access static members, we can access directly.


		
		